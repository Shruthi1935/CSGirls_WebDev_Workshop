NOTES:

layout.js:
- change meta data to 'personal portfolio'


global.css:
- delete everything except tailwind import


page.js:
- delete everything except imports


VS Code Extensions:
- IntelliSense: autocompleting, hover previews, helpful with syntax
- Prettier

Icons:
-  npm install react-icons
- npm install @heroicons/react


public folder:
- this is where you keep images you want to use on the frontend
- also keep custom fonts here

    fonts folder:
    - create new folder within public
    - import font files (rename if needed)
    - inside globals.css, add font setup/classes
    <>
      <div className="bg-sky-300 m-12 p-32 text-[#ffffff] text-center text-4xl font-bold">
        Hello World! <br /> All made with Tailwind CSS!
      </div>
      
      <div className="bg-sky-300 m-12 p-32 text-[#ffffff] text-center text-4xl font-bold font-camellia">
          Hello World! <br /> All made with Tailwind CSS!
      </div>

      <div className="bg-sky-300 m-12 p-32 text-[#ffffff] text-center text-4xl font-bold font-sugarmagic">
          Hello World <br /> All made with Tailwind CSS
      </div>
    </>


Landing Page:
- first work on navbar 
- then landing page content

Timeline:
- timeline: npx shadcn@latest add https://ui.aceternity.com/registry/timeline.json
- this creates components.json, lib/utils.js, and components/ui/componentName.jsx 
- import react in page.js
- npm install framer-motion
- in timeline.jsx, change 'motion' to 'framer-motion'
- npm install tailwindcss-animate






"use client";
import { useScroll, useTransform, motion } from "framer-motion";
import React, { useEffect, useRef, useState } from "react";

export const Timeline = ({ data }) => {
  const ref = useRef(null);
  const containerRef = useRef(null);
  const [height, setHeight] = useState(0);
  const [scrollTarget, setScrollTarget] = useState(null);

  // Ensure containerRef is assigned before using useScroll
  useEffect(() => {
    if (containerRef.current) {
      setScrollTarget(containerRef.current);
    }
  }, []);

  useEffect(() => {
    if (ref.current) {
      const rect = ref.current.getBoundingClientRect();
      setHeight(rect.height);
    }
  }, []);

  const { scrollYProgress } = useScroll({
    target: scrollTarget, // ✅ Ensure ref is available
    offset: ["start 10%", "end 90%"],
    layoutEffect: false, // ✅ Fix hydration warning
  });

  // ✅ Convert animations to numeric values to prevent `[object Object]` errors
  const heightTransform = useTransform(scrollYProgress, [0, 1], [0, height]);
  const opacityTransform = useTransform(scrollYProgress, [0, 0.1], [0, 1]);

  return (
    <div className="w-full bg-white font-sans md:px-10" ref={containerRef}>
      <div ref={ref} className="relative max-w-screen pb-20">
        {data.map((item, index) => (
          <div key={index} className="flex justify-start pt-10 md:pt-40 md:gap-10">
            <div className="sticky flex flex-col md:flex-row z-40 items-center top-40 self-start max-w-xs lg:max-w-sm md:w-full">
              <div className="h-10 absolute left-3 md:left-3 w-10 rounded-full bg-white flex items-center justify-center">
                <div className="h-4 w-4 rounded-full bg-black p-2" />
              </div>
              <h3 className="hidden md:block text-xl md:pl-20 md:text-5xl font-bold text-black font-chillax">
                {item.title}
              </h3>
            </div>

            <div className="relative pl-20 pr-4 md:pl-4 w-full">
              <h3 className="md:hidden block text-2xl mb-4 text-left font-bold text-black font-chillax">
                {item.title}
              </h3>
              {item.content}
            </div>
          </div>
        ))}

        {/* Timeline Line with Motion Effects */}
        <div
          style={{ height: `${height}px` }}
          className="absolute md:left-8 left-8 top-0 overflow-hidden w-[2px] bg-[linear-gradient(to_bottom,var(--tw-gradient-stops))] from-transparent from-[0%] via-neutral-200 dark:via-neutral-700 to-transparent to-[99%] [mask-image:linear-gradient(to_bottom,transparent_0%,black_10%,black_90%,transparent_100%)]"
        >
          <motion.div
            style={{
              height: heightTransform.get(), // ✅ Ensure it's a number
              opacity: opacityTransform.get(), // ✅ Fix invalid object error
            }}
            transition={{ duration: 0.5 }} // ✅ Smooth transition
            className="absolute inset-x-0 top-0 w-[2px] bg-gradient-to-t from-purple-500 via-blue-500 to-transparent from-[0%] via-[10%] rounded-full"
          />
        </div>
      </div>
    </div>
  );
};

